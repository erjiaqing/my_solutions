#include <bits/stdc++.h>

using namespace std;


const int mod = 1000000007;
class OrderedProduct {
private:
	long long frac[40000], inv[40000];
	long long cnt[5000];
	long long pow_mod(long long a, long long b)
	{
		long long ret = 1;
		while (b)
		{
			if (b & 1) (ret *= a) %= mod;
			b >>= 1;
			(a *= a) %= mod;
		}
		return ret;
	}
	long long c(long long a, long long b)
	{
		if (a < b) return 0;
		return frac[a] * inv[b] % mod * inv[a - b] % mod;
	}
	void prepare()
	{
		memset(cnt, 0, sizeof cnt);
		frac[0] = 1;
		for (int i = 1; i < 40000; i++)
			frac[i] = (frac[i - 1] * i) % mod;
		for (int i = 0; i < 40000; i++) inv[i] = pow_mod(frac[i], mod - 2);
	}
public:
	int count(vector <int> a) {
		prepare();
		long long tot = 0, sum = 0;
		for (int i = 0; i < (int) a.size(); i++)
			sum += a[i];
		for (int i = 1; i <= sum; i++)
		{
			cnt[i] = 1;
			for (int j = 0; j < (int) a.size(); j++)
				(cnt[i] *= c(a[j] + i - 1, i - 1)) %= mod;
			for (int k = 1; k < i; k++)
			{
				cnt[i] -= cnt[k] * c(i, k) % mod;
				while (cnt[i] < 0) cnt[i] += mod;
			}
			tot += cnt[i];
			//cout << cnt[i] << endl;
		}
		tot %= mod;
		return tot;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	OrderedProduct *obj;
	int answer;
	obj = new OrderedProduct();
	clock_t startTime = clock();
	answer = obj->count(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 541;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {23,49,12};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 316396073;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {2,5,4,2,3,1,3,1,4,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 225466557;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
